{"version":3,"sources":["App.js","components/Image.js","components/FetchImageById.js","helpers/config.js","containers/Home.js","App.prod.js","serviceWorker.js","index.js"],"names":["module","exports","require","Image","image","name","className","style","backgroundImage","urls","regular","backgroundColor","color","alt","FetchImageById","data","id","useState","setImage","loading","setLoading","useEffect","a","axios","get","fetchData","list","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","results","App","slidesPerView","map","isActive","isNext","isPrev","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GACEA,EAAOC,QAAUC,EAAQ,K,oyECWZC,EAVM,SAAC,GAAD,UACnBC,aADmB,MACX,GADW,MAEnBC,YAFmB,MAEZ,GAFY,SAInB,yBAAKC,UAAU,QAAQC,MAAO,CAAEC,gBAAgB,OAAD,iBAASJ,EAAMK,YAAf,aAAS,EAAYC,QAArB,KAAiCC,gBAAiBP,EAAMQ,QACrG,4BAAKP,GACL,8BAAOD,EAAMS,OCyBFC,EA3Be,SAAC,GAExB,IAAD,IADJC,KAAQC,EACJ,EADIA,GAAIX,EACR,EADQA,KACR,EACsBY,qBADtB,mBACGb,EADH,KACUc,EADV,OAE0BD,oBAAS,GAFnC,mBAEGE,EAFH,KAEYC,EAFZ,KAiBJ,OAbAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBF,GAAW,GADK,SAEcG,IAAMC,IAAN,UCdZ,iDDcY,iBACRR,IAHN,gBAEFZ,EAFE,EAERW,KAGRG,EAASd,GACTgB,GAAW,GANK,2CAAH,qDASfK,KACC,CAACT,IAGF,oCACGG,GAAW,yBAAKb,UAAU,WAAf,eACVa,GAAW,kBAAC,EAAD,CAAOd,KAAMA,EAAMD,MAAOA,MED7C,IAAMsB,EAnBN,SAAiBC,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAGIQ,CAAQpB,EAAKqB,SAoBXC,EAlBI,WACjB,OACE,kBAAC,IAAD,CACAC,cAAe,GAEZZ,EAAKa,KAAI,SAAAnC,GAAK,OACb,kBAAC,IAAD,MACG,YAAmC,IAAhCoC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACpB,GAAIF,GAAYC,GAAUC,EACxB,OAAO,kBAAC,EAAD,CAAgB3B,KAAMX,YC9B5BiC,UAFH,kBAAO,kBAACM,EAAD,Q,oGCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a20ef590.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./App.prod');\n} else {\n  module.exports = require('./App.admin');\n}","import React from \"react\";\n\nexport const Image = ({\n  image = {},\n  name = \"\",\n}) => (\n  <div className=\"image\" style={{ backgroundImage: `url(${image.urls?.regular})`, backgroundColor: image.color }}>\n    <h2>{name}</h2>\n    <span>{image.alt}</span>\n  </div>\n);\n\nexport default Image;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nimport { API_BASE } from \"../helpers/config\";\nimport Image from \"./Image\";\n\nexport const FetchImageById = ({\n  data: { id, name },\n}) => {\n  const [image, setImage] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const { data: image } = await axios.get(\n        `${API_BASE}image/${id}`\n      );\n      setImage(image);\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [id]);\n\n  return (\n    <>\n      {loading && <div className=\"loading\">Loading...</div>}\n      {!loading && <Image name={name} image={image} />}\n    </>\n  );\n}\n\nexport default FetchImageById;","// export const API_BASE = \"http://localhost:5000/\";\nexport const API_BASE = \"https://get-image-from-unsplash.herokuapp.com/\";","import React from \"react\";\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nimport 'swiper/swiper.scss';\n\nimport data from \"../data/animals.json\";\nimport FetchImageById from '../components/FetchImageById';\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst list = shuffle(data.results);\n\nexport const App = () => {\n  return (\n    <Swiper\n    slidesPerView={1}\n    >\n      {list.map(image => (\n        <SwiperSlide>\n          {({ isActive, isNext, isPrev }) => {\n            if (isActive || isNext || isPrev) {\n              return <FetchImageById data={image} />\n            }\n          }}\n        </SwiperSlide>\n      ))}\n    </Swiper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\n\nimport \"./index.css\";\n\nimport Home from './containers/Home';\n\nconst App = () => (<Home />);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}